# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_data.wise3.ipynb (unless otherwise specified).

__all__ = ['DIR_DATA', 'pth_site', 'site', 'vars_loc', 'vars_time', 'pth_horizon', 'horizon', 'vars_cont', 'vars_disc',
           'vars_id', 'depth_cols', 'horizon_cont', 'horizon_mean_cont', 'horizon_std_cont', 'imagify_profile',
           'plt_profile_image', 'hv_depth_variable_image']

# Cell
import os, io, subprocess
from pathlib import Path
import numpy as np
import pandas as pd
import torch
import torch.nn.functional as F

import matplotlib.pyplot as plt
from matplotlib.ticker import FormatStrFormatter
import holoviews as hv

from .core import *

# Cell
DIR_DATA = Path('../data')

# Cell
pth_site = (
    DIR_DATA / 'ISRIC_report_2008_02_csv' / 'WISE3_SITE.csv')

site = pd.read_csv(pth_site)
site.columns = [o.lower() for o in site.columns]

vars_loc = ['LONDD', 'LATDD', 'COUNTRY']
vars_time = ['DATEYR', ]

vars_loc, vars_time = (
    [n.lower() for n in ns]
    for ns in [vars_loc, vars_time])

# Cell
pth_horizon = (
    DIR_DATA / 'ISRIC_report_2008_02_csv' / 'WISE3_HORIZON.csv')

horizon = pd.read_csv(pth_horizon)
horizon.columns = [c.lower() for c in horizon.columns]

vars_cont = ['ORGC', 'TOTN', 'CACO3', 'GYPSUM',
             'PHH2O', 'PHKCL', 'PHCACL2', 'ECE', 'EXCA', 'EXMG',
             'EXNA', 'EXK', 'EXACID', 'EXALUM', 'CECSOIL', 'BSAT',
             'SAND', 'SILT', 'CLAY', 'GRAVEL', 'BULKDENS', 'VMC1',
             'VMC2', 'VMC3']

vars_disc = ['DESIG', 'MCOLOR', 'DCOLOR']
vars_id = ['WISE3_ID', 'HORIZ']
depth_cols = ['TOPDEP', 'BOTDEP']

vars_cont, vars_disc, vars_id, depth_cols = (
    [n.lower() for n in ns]
    for ns in [vars_cont, vars_disc, vars_id, depth_cols])

# Cell
horizon_cont = horizon[vars_cont]
horizon_mean_cont = horizon_cont.mean().values
horizon_std_cont = horizon_cont.std().values

# Cell

def imagify_profile(
    df, topdep, botdep, max_depth=None, depth_res=5):
    '''
    '''
    nseg = len(df)

    depth = np.arange(0, max_depth, depth_res)
    variable = df.columns.values

    segs = []
    for _, r in df.iterrows():
        seg = r.drop(['botdep', 'topdep'], axis=1).values
        seg = torch.tensor(seg, dtype=torch.float32)

        n = (r.botdep - r.topdep - depth_res) // depth_res + 1
        seg = seg.repeat(n, 1)

        segs.append(seg)

    img = torch.cat(segs, dim=0)
    if max_depth is not None:
        pad = (max_depth - len(img) * depth_res) // depth_res
        img = F.pad(img, pad=(0, 0, 0, pad), value=np.nan)


    img = img.numpy()

    return depth, variable, img

# Cell

def plt_profile_image(
    ax, img,
    cmap='bwr', show_cbar=False, bot_labels=None, top_labels=None):
    '''
    '''
    nvar = img.shape[1]

    ax.imshow(
        img,
        aspect='auto', cmap=cmap, interpolation='None')

    ax.set_facecolor('black')
    ax.set_ylabel('Depth [cm]', fontsize=16)

    if bot_labels is not None:
        ax.set_xticks(range(nvar))
        ax.set_xticklabels(bot_labels)
        plt.setp(ax.get_xticklabels(),
                 rotation=45, ha="right", rotation_mode="anchor",
                 fontsize=16)
    else:
        ax.get_xaxis().set_visible(False)

    ax1 = ax.twiny()
    im = ax1.imshow(
        img, vmin=-2, vmax=+2,
        aspect='auto', cmap=cmap, interpolation='None')

    if show_cbar:
        cbar = ax1.figure.colorbar(im, ax=ax1)

    if top_labels is not None:
        ax1.set_xticks(range(nvar))
        ax1.set_xticklabels(top_labels)
        plt.setp(ax1.get_xticklabels(),
                 rotation=45, ha='left', rotation_mode='anchor',
                 fontsize=16)
    else:
        ax1.get_xaxis().set_visible(False)

    return ax

# Cell

def hv_depth_variable_image(
    depth, variable, img, **imgs):

    variable, depth = np.meshgrid(variable, depth)

    variable, depth = variable.ravel(), depth.ravel()
    img = img.ravel()

    other_imgs = tuple(img.ravel() for img in imgs.values())
    other_vdims = [n for n in imgs.keys()]

    data = (variable, depth, img) + other_imgs
    kdims = ['Variable', 'Depth']
    vdims = ['Sigma'] + other_vdims

    heatmap = hv.HeatMap(data, kdims, vdims)

    heatmap = heatmap.opts(
        width=140, xaxis=None,
        height=80, yaxis=None, invert_yaxis=True,
        clipping_colors={'NaN': 'black',
                         'max': 'yellow', 'min': 'green'},
        clim=(-2, 2),
        toolbar='above', tools=['hover'],
        colorbar=False, cmap='coolwarm')

    return heatmap
